parameters:
  - name: serviceConnection
    type: string 
  - name: terraformDirectory 
    type: string 
    default: 'terraform'
  - name: terraformStateKey
    type: string
    default: ''
  - name: storageAccount
    type: string
  - name: location
    type: string
    default: 'westeurope'
  - name: resourceGroup
    type: string
  - name: containerName
    type: string
  - name: deployment
    type: string 
  - name: dependsOn
    type: string
    default: ''


jobs:
  - job: TerraformPlan
    displayName: Terraform Plan
    dependsOn: ${{ parameters.dependsOn }}
    steps:
      - task: TerraformCLI@0
        displayName: Terraform init
        inputs:
          command: init
          backendType: azurerm
          backendServiceArm: ${{ parameters.serviceconnection }}
          workingDirectory: "$(System.DefaultWorkingDirectory)/${{ parameters.terraformDirectory }}"
          ensureBackend: false
          backendAzureRmResourceGroupName: ${{ parameters.resourceGroup }}
          backendAzureRmResourceGroupLocation: ${{ parameters.location }}
          backendAzureRmStorageAccountName: ${{ parameters.storageAccount }}
          backendAzureRmStorageAccountSku: 'Standard_LRS'
          backendAzureRmContainerName: ${{ parameters.containerName }}
          backendAzureRmKey: ${{ parameters.terraformStateKey }}

      - task: TerraformCLI@0
        displayName: Terraform plan
        inputs:
          command: plan
          environmentServiceName: ${{ parameters.serviceconnection }}
          publishPlanResults: ${{ parameters.deployment }}
          workingDirectory: "$(System.DefaultWorkingDirectory)/${{ parameters.terraformDirectory }}"
          runAzLogin: true
          commandOptions: -input=false -out=${{parameters.deployment}}-tf.plan -detailed-exitcode -lock=false

      - task: CopyFiles@2
        displayName: Copy plan file
        inputs:
          SourceFolder: $(System.DefaultWorkingDirectory)/${{ parameters.terraformDirectory }}
          Contents: '*.plan'
          TargetFolder: $(Build.ArtifactStagingDirectory)
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        displayName: Publish Pipeline Artifact
        inputs:
          artifactName: terraformPlan-${{ parameters.deployment }}
          targetPath: $(Build.ArtifactStagingDirectory)